function isMobileDevice() {
    return /Mobi|Android|iPhone|iPad|iPod|IEMobile|Opera Mini/i.test(navigator.userAgent);
}

if (isMobileDevice()) {
	beforeAterImg_forMobile();
} else {
  beforeAterImg_forComputer();
}





let toggleClass;
function sideMenu() {
  const sideBlock = document.querySelector('.sideblock');
  const sideMenuToggle = document.querySelector('.sideblock__toggle');
  const aside = document.querySelector('.sidemenu');
  const plash = document.querySelector('.plash');

   toggleClass = (e) => {

    if (!aside.classList.contains('active')) {
      aside.classList.add('active');
      document.body.classList.add('lock');
    }else {
      aside.classList.remove('active');
      document.body.classList.remove('lock');
    }
  }

  sideMenuToggle.addEventListener("click", toggleClass);
  plash.addEventListener("click", toggleClass);
}

sideMenu();


const tabs = () => {
  const buttons = document.querySelectorAll('.tabs__item');
  const contents = document.querySelectorAll('.tabs__body');

  const deleteAllClass = () => {
    contents.forEach((item, i) => {
      item.classList.remove('active');
    });

  }
  buttons.forEach((item) => {
    item.addEventListener("click", (e) => {
      let currentColor = e.target.style.backgroundColor;
      contents.forEach((item) => {
        if (item.dataset.tab == e.target.id) {
          deleteAllClass();
          item.style.backgroundColor = currentColor;
          item.classList.add('active');
        }
      });

    })
  });

}
tabs()

const accordeon = () => {
  let accordeon = document.querySelectorAll('.accordeon__item');


  accordeon.forEach( item => {
    item.addEventListener("click", event => {
      let self = event.currentTarget;
      let accordeonTarget = self.querySelector('.accordeon__target');
      // let accordeonTargetNs = document.querySelector('.accordeon__target');
      let accordeonContent = self.querySelector('.accordeon__content');
      // let accordeonContentNs = document.querySelector('.accordeon__content');
      if (!self.classList.contains('open')) {
        accordeon.forEach( elem => {
          elem.classList.remove('open');
          document.querySelectorAll('.accordeon__content').forEach( item => {
            item.style.maxHeight = 0;
          });
        });
        self.classList.add('open');
        accordeonContent.style.maxHeight = accordeonContent.scrollHeight + 'px';
        accordeonTarget.setAttribute('aria-expanded', true);
        accordeonContent.setAttribute('aria-hidden', false);
      }else{
        self.classList.remove('open');
        accordeonContent.style.maxHeight = 0;
      }
    })
  });
}
accordeon();

const circleBar = () => {

const numbers = document.querySelectorAll('.number');
const svgEl = document.querySelectorAll('svg circle');
const counters = Array(numbers.length);
const intervals = Array(counters.length);
counters.fill(0);

numbers.forEach((number, index) => {
    intervals[index] = setInterval(() => {
        if(counters[index] === parseInt(number.dataset.num)){
            clearInterval(counters[index]);
        }else{
            counters[index] += 1;
            number.innerHTML = counters[index] + "%";
            svgEl[index].style.strokeDashoffset = Math.floor(472 - 440 * parseFloat(number.dataset.num / 100));
        }
    }, 20);
});

}
circleBar();


const counter = () => {

const elements = document.querySelectorAll('.counter__item_count');
const increments = Array.from(elements, el => Number(el.dataset.num));
let smalestNum = Math.min(...increments);

elements.forEach((item, i) => {
  let inc = +item.dataset.num / smalestNum;
  f1(item, inc, +item.dataset.num, 20);
});
//1. переділити всі datanum на найменший datanum
//2.час переділити на datanum

function f1 (element, increment, maxNum, time) {
  let count = 0;
  function addCount () {
    count += increment;
    element.textContent = Math.ceil(count);
    if (count > maxNum) {
      clearInterval(intervalId);
      element.textContent = maxNum;
    }
  }
  let intervalId = setInterval(addCount, time);
}
}
counter();

const countdownTimer = () => {
  const timer = document.querySelector('.countdown-wrapper'),
        daysElement = timer.querySelector('#days'),
        hoursElement = timer.querySelector('#hours'),
        minutesElement = timer.querySelector('#minutes'),
        secondsElement = timer.querySelector('#seconds');



  const currentYear = new Date().getFullYear();
  const nextYear = new Date(`January 01 2026 00:00:00`);
  let interval = setInterval(updateClock, 1000);



  function updateClock() {
    const currentTime = new Date();
    const dif = nextYear - currentTime;
    const daysLeft = Math.floor(dif / 1000 / 60 / 60 / 24);
    const hoursLeft = Math.floor(dif / 1000 / 60 / 60)  % 24;
    const minutesLeft = Math.floor(dif / 1000 / 60) % 60;
    const secondsLeft = Math.floor(dif / 1000 ) % 60;
    if (dif <= 0) {
      clearInterval(interval)
      return
    }

    daysElement.innerHTML = daysLeft < 10 ? '0' + daysLeft : daysLeft;
    hoursElement.innerHTML = hoursLeft < 10 ? '0' + hoursLeft : hoursLeft;
    minutesElement.innerHTML = minutesLeft < 10 ? '0' + minutesLeft : minutesLeft;
    secondsElement.innerHTML = secondsLeft < 10 ? '0' + secondsLeft : secondsLeft;
  }
  updateClock()

}
countdownTimer();

const anchorScroll = () => {
  const anchorsLinks = document.querySelectorAll('.nav__link');
  anchorsLinks.forEach((item) => {
    item.addEventListener("click", (e) => {
      e.preventDefault();
      let currentClick = e.target.dataset.anchor;
      let currentBlock = document.querySelector(`#${currentClick}`);
      currentBlock.scrollIntoView({
        behavior:'smooth'
      })
      toggleClass();
    })
  });
}
anchorScroll();


let elements = document.querySelectorAll(".section");
const arrayOfElementsPosition = {};

elements.forEach((item, i) => {
  let currentName = item.id;
  let elementPositionTop = item.getBoundingClientRect().top + window.pageYOffset;
  let elementPositionBottom = item.getBoundingClientRect().bottom + window.pageYOffset;
  arrayOfElementsPosition[currentName] = [elementPositionTop, elementPositionBottom];
});

window.addEventListener('scroll', () => {
  document.querySelectorAll('.nav__link').forEach((item) => {
    item.classList.remove('current-position');
  });
  let middleOfInnerHeight = window.pageYOffset + document.documentElement.clientHeight / 2;
  for (let key in arrayOfElementsPosition) {
    if (middleOfInnerHeight > arrayOfElementsPosition[key][0] && middleOfInnerHeight < arrayOfElementsPosition[key][1]) {
      document.querySelector(`.nav__link[data-anchor="${key}"]`).classList.add('current-position');
    }
  }
})


const quiz = () => {
	const questions = [
		{
			question: "What programming language works in the browser?",
			answers: ["Java", "C", "Python", "JavaScript"],
			correct: 4,
		},
		{
			question: "What does CSS stand for?",
			answers: [
				"Central Style Sheets",
				"Cascading Style Sheets",
				"Cascading Simple Sheets",
				"Cars SUVs Sailboats",
			],
			correct: 2,
		},
		{
			question: "What does HTML stand for?",
			answers: [
				"Hypertext Markup Language",
				"Hypertext Markdown Language",
				"Hyperloop Machine Language",
				"Helicopters Terminals Motorboats Lamborginis",
			],
			correct: 1,
		},
		{
			question: "In what year was JavaScript created?",
			answers: ["1996", "1995", "1994", "all answers are incorrect"],
			correct: 2,
		},
	];

	// Змінні HTML елементів
	const headerContainer = document.querySelector('#header');
	const listContainer = document.querySelector('#list');
	const submitBtn = document.querySelector('#submit');
	const tryAgainBtn = document.querySelector('#again');


	// Змінні вікторини
	let questionIndex = 0,
	 		score = 0;

	tryAgainBtn.addEventListener("click", () => {
		tryAgainBtn.classList.add('hide');
		submitBtn.classList.remove('hide');
		questionIndex = 0;
		score = 0;
		showQuestion();
	})

	clearHTML();
	showQuestion();
	function clearHTML() {
		headerContainer.innerHTML = '';
		listContainer.innerHTML = '';
	}


	function showQuestion () {
		const headerTemplate = `<h2 class="title">%title%</h2>`;
		const title = headerTemplate.replace('%title%', questions[questionIndex].question);
		headerContainer.innerHTML = title;

		questions[questionIndex]['answers'].forEach((item, i) => {
			listContainer.innerHTML += `
			<li>
				<label>
					<input type="radio" class="answer" name="answer" value="${i + 1}" />
					<span>${item}</span>
				</label>
			</li>`;
		});

	}

	submitBtn.addEventListener("click", checkAnswer);

	function checkAnswer() {
		const checkRadio = listContainer.querySelector('input[type="radio"]:checked');
		if (!checkRadio) {
			submitBtn.blur();
			return;
		}
		if (checkRadio.value == questions[questionIndex]['correct']) {
				score++;
		}
		if (questionIndex != questions.length - 1) {
			questionIndex++;
			clearHTML();
			showQuestion();
		} else {
			clearHTML();
			showResult();
		}
	}

	function showResult() {
		tryAgainBtn.classList.remove('hide');
		submitBtn.classList.add('hide');

		let resultsTemplate = `
		<h2 class="title">%title%</h2>
		<h3 class="summary">%message%</h3>
		<p class="result">%result%</p>`;

		let title, message;
		let result = `Correct answers ${score} out of ${questions.length}`
		if (score == questions.length) {
			title = 'Congratulations! 🎉';
			message = 'You answered all the questions correctly 😎';
		} else if ((score * 100) / questions.length > 50) {
			title = 'Congratulations! 🎉';
			message = 'You answered more than half of the questions correctly 🙂';
		} else if ((score * 100) / questions.length == 50) {
			title = 'Very good! 🎉';
			message = 'You have half of the correct answers. 👍';
		}else if (score == 0) {
			title = 'Unfortunately 😥';
			message = 'All the answers are incorrect';
		}else {
			title = 'You need to make an effort 🙃';
			message = 'You have less than half of the correct answers';
		}

		headerContainer.innerHTML = resultsTemplate.replace('%title%', title)
					.replace('%message%', message).replace('%result%', result)
	}
}

quiz();


function beforeAterImg_forMobile () {
	const mySlide = document.querySelector('#myslide');
	const dragger = document.querySelector('.beforeafter__img_dragger');
	const draggerCircle = document.querySelector('.beforeafter__img_dragger-circle');
	const draggerLine = document.querySelector('.beforeafter__img_dragger-verticalline');

	mySlide.addEventListener("touchstart", (e) => {
		let touch = e.touches[0];
		let rect = mySlide.getBoundingClientRect();
		let offsetX = touch.clientX - rect.left;
		draggerCircle.style.left = offsetX + 'px';
		draggerLine.style.left = offsetX + 'px';
		document.getElementById('two').style.width = offsetX + 'px';
	})
	mySlide.addEventListener("touchend", () => {
		isMouseDown = false;
	})


	mySlide.addEventListener("touchmove", (e) => {
		let touch = e.touches[0];
		let rect = mySlide.getBoundingClientRect();
		let offsetX = touch.clientX - rect.left;
		if (offsetX <= 0 || offsetX >= e.target.offsetWidth) {
			return
		}
		draggerCircle.style.left = offsetX + 'px';
		draggerLine.style.left = offsetX + 'px';
		document.getElementById('two').style.width = offsetX + 'px';
	})
}


function beforeAterImg_forComputer() {
  const mySlide = document.querySelector('#myslide');
  const dragger = document.querySelector('.beforeafter__img_dragger');
  const draggerCircle = document.querySelector('.beforeafter__img_dragger-circle');
  const draggerLine = document.querySelector('.beforeafter__img_dragger-verticalline');
  let isMouseDown = false;
  mySlide.addEventListener("mousedown", (e) => {
  	isMouseDown = true;
  	if (isMouseDown) {
  		let x = e.offsetX;
  		draggerCircle.style.left = e.offsetX + 'px';
  		draggerLine.style.left = e.offsetX + 'px';
  		document.getElementById('two').style.width = e.offsetX + 'px';
  	}

  })
  document.addEventListener("mouseup", () => {
  	isMouseDown = false;
  })


  mySlide.addEventListener("mousemove", (e) => {
  	if (isMouseDown) {
  		let x = e.offsetX;
  		draggerCircle.style.left = e.offsetX + 'px';
  		draggerLine.style.left = e.offsetX + 'px';
  		document.getElementById('two').style.width = e.offsetX + 'px';
  	}
  })
}
/*////////
//////////
////////*/
const calculation = () => {
  const elementsForListener = document.querySelectorAll('.listener');
  const elementRangeListener = document.querySelector('.listener-range');
  const elementOutputRange = document.querySelector('.duration__output');
  // function калькулятор даних
  const calculateAllValues = () => {
    const elementOutputPrice = document.querySelector('.resulting__price')
    const inputDuration = document.querySelector('.duration__content input').value;
    const allCheckedInputs = Array.from(document.querySelectorAll('.listener:checked'));
    const allCheckedInputsData = allCheckedInputs.map(item => {
      if (item.dataset.value) {
        return +item.dataset.value;
      }
    })
    allCheckedInputsData.push(+inputDuration);
    const result = allCheckedInputsData.reduce((accum,item,index,array) => {
      if (index === array.length - 1) {
        return accum * item;
      }
      return accum + item;
    })
    elementOutputPrice.textContent = `${result} $`;
  }
  const toggleClassActive = (element) => {
    const parentUl = element.closest('ul');
    if (parentUl != null) {
    parentUl.querySelectorAll('.chosing-list__item').forEach((item) => {
      item.classList.remove('active');
    });
    }
    if (element.closest('li.chosing-list__item')) {
      element.closest('li.chosing-list__item').classList.add('active')
      document.querySelector(`#${parentUl.dataset.forresult}`).textContent = `${ element.dataset.value} $`;
    }else if (element.closest('.duration__label')) {
      document.querySelector(`#${element.closest('.duration__label').dataset.forresult}`).textContent = `${element.value} d`;
    }
    else {
      let allAdditionalOptions = Array.from(parentUl.querySelectorAll('input.listener[type="checkbox"]:checked'));
      const resultOptionsValue = allAdditionalOptions.reduce((accum,item) => {
        return accum + +item.dataset.value;
      },0)
      document.querySelector(`#${parentUl.dataset.forresult}`).textContent = `${resultOptionsValue} $`;
    }
  }

  const letColaborateWithRange = () => {
    document.querySelector('.duration__label').classList.remove('disabled-childs');
  }

  //// listeners elements for calculating

  //listener for input type click
  elementsForListener.forEach((item, i) => {
    item.addEventListener("click", (e) => {
      toggleClassActive(e.target)
      calculateAllValues();
      letColaborateWithRange();
    })
  });
  //listener input text for type range
  elementOutputRange.addEventListener("input", (e) => {
    if (e.target.value.length == 0) {
      e.target.value = 1;
      return;
    }
    let newValue = e.target.value;
    const validRange = /^(?:[1-9]|[12][0-9]|30)?$/;
    if (!validRange.test(newValue)) {
      e.target.value = newValue.slice(0, -1);
    }
    elementRangeListener.value = e.target.value;
    toggleClassActive(e.target);
    calculateAllValues();
  })
  // listenr for type range
  elementRangeListener.addEventListener("change", (e) => {
    elementOutputRange.value = e.target.value;
    toggleClassActive(e.target);
    calculateAllValues();
  })
}

calculation()


const searchCountry = () => {

  let arrCountries;
  const flagCountry = document.querySelector('.flag-img'),
        countryName = document.querySelector('.country-info__capital span'),
        countryPopulation = document.querySelector('.country-info__population span'),
        countryContinent = document.querySelector('.country-info__continent span'),
        countryIndependent = document.querySelector('.country-info__independent span'),
        countryLang = document.querySelector('.country-info__lang span'),
        countryMaps = document.querySelector('.country-info__maps a');
        let nameInput = document.querySelector('.search__country_input');
        let elementList = document.querySelector('.countries__block_list');

  fetch(`https://restcountries.com/v3.1/all`)
    .then(json => json.json())
    .then(data => {
      arrCountries = data;
      nameInput.disabled = false;
    })
    .catch(err => {
      elementList.closest('div').classList.add('sub-text');
    })

    let newArr;

  nameInput.addEventListener('input', (e) => {
    if (e.target.value == '') {
      elementList.innerHTML = '';
      elementList.classList.remove('active');
      return
    }
    newArr = arrCountries.filter((item,index) => {
      if (item.name.common.match(e.target.value)) {
        return item;
      }
    })
    if (newArr.length > 0) {
      elementList.classList.add('active');
    }
    showList(newArr)
  })

  function showList(arr) {
    elementList.innerHTML = '';
    arr.forEach((item, i) => {
      let elementLi = document.createElement('li');
      elementLi.classList.add('list-item');
      elementLi.innerText = item.name.common;
      elementList.append(elementLi);
    });

  }

  elementList.addEventListener('click', (e) => {
    if (e.target.classList.contains('list-item')) {
      render(e.target.innerText);
    }
    elementList.classList.remove('active');
  })

  function render(name) {
    newArr.forEach((arrCountry, i) => {
      if (arrCountry.name.common == name) {
        function objectToString(obj) {
          let result = '';
          for (let key in obj) {
            result += `${obj[key]}, `;
          }
          return result.slice(0,-2);
        }
        flagCountry.src = arrCountry.flags.png;
        countryName.innerText = `- ${arrCountry.capital}`;
        countryPopulation.innerText = `- ${arrCountry.population}`;
        countryContinent.innerText = `- ${arrCountry.continents}`;
        countryIndependent.innerText = `- ${arrCountry.independent ? `True` : `False`}`;
        countryLang.innerText = `- ${objectToString(arrCountry.languages)}.`;
        countryMaps.href = arrCountry.maps.googleMaps;
        countryMaps.textContent = '- Google Maps';

      }
    });

  }
}

searchCountry();

const textCounter = () => {
  const textArea = document.querySelector('.textarea');
  const elementOfWords = document.querySelector('.words');
  const elementOfCharacters = document.querySelector('.haracters');
  const elementOfSymbols = document.querySelector('.symbols');

  textArea.addEventListener("input", (e) => {
    let countOfWords = e.target.value.split(' ');
    let countOfCharacters = e.target.value;
    const regex = /[^а-яА-Яa-zA-Z0-9\s]/g;
    let countOfSymbols = e.target.value.match(regex);
    countOfWords = countOfWords.filter(item => {
      if (item.length > 0 && item.match(/[а-яА-Яa-zA-Z0-9]/g)) {
          return item;
      }
    });
    elementOfWords.textContent = countOfWords.length;
    elementOfCharacters.textContent = countOfCharacters.length;
    countOfSymbols ? elementOfSymbols.textContent = countOfSymbols.length : elementOfSymbols.textContent = 0;
  })
}

textCounter();


const typing = () => {
  const element = document.querySelector('#word');
  let words = ['Words.', 'Characters.', 'and Symbols.'];
  let count = 0;
  let countForArr = 0;
  let toForward = true;
  let timeForInterval = 300;
  function f1(arr) {
    let currentWord = arr[countForArr];
    if (count <= currentWord.length - 1 && toForward) {
      count++;
      element.textContent = currentWord.slice(0,count);
      return;
    }else {
      toForward = false;
      count--;
      element.textContent = currentWord.slice(0, count);
    }
      if (count == 0) {
        toForward = true;
        countForArr++;
        if (countForArr == arr.length) {
          countForArr = 0;
        }
      }
  }
  let timeInterval = setInterval(f1.bind(null, words), 200);
}

typing();

const converter = () => {
  const inputCelsius = document.querySelector('#field-1'),
        inputFahrenheit = document.querySelector('#field-2'),
        selectOptions = document.querySelector('#options'),
        titleFirstElement = document.querySelector('.converter__title_1'),
        titleSecondElement = document.querySelector('.converter__title_2');

  const settings = {
    temperature: {
      name1: 'Celsius',
      name2: 'Fahrenheit',
      solution1: function (inputFirstValue) {
        return ((inputFirstValue * 9) / 5 + 32).toFixed(1);
      },
      solution2: function (inputFirstValue) {
        return ((inputFirstValue -32) * 5 / 9).toFixed(1);
      },
    },
    distance: {
      name1: 'Kilometres',
      name2: 'Miles',
      solution1: function (inputFirstValue) {
        return (inputFirstValue * 0.621371).toFixed(1);
      },
      solution2: function (inputFirstValue) {
        return (inputFirstValue * 1.60934).toFixed(1);
      },
    },
    weight: {
      name1: 'Kilograms',
      name2: 'Pounds',
      solution1: function (inputFirstValue) {
        return (inputFirstValue * 2.20462).toFixed(1);
      },
      solution2: function (inputFirstValue) {
        return (inputFirstValue * 0.453592).toFixed(1);
      },
    },
  }

  const converterListener = (e = false) => {
    let currentType;
    if (!e) {
      currentType = document.querySelector('#options option:checked').value;
    }else {
      currentType = e.target.value;
    }
    titleFirstElement.textContent = settings[currentType]['name1'];
    titleSecondElement.textContent = settings[currentType]['name2'];
    inputCelsius.value = '';
    inputFahrenheit.value = '';

    inputCelsius.addEventListener('input', (e) => {
      let currentValue = +e.target.value;
      inputFahrenheit.value = settings[currentType].solution1(currentValue);
      if (!inputCelsius.value) {
        inputFahrenheit.value = '';
      }
    });
    inputFahrenheit.addEventListener('input', (e) => {
      let currentValue = +e.target.value;
      inputCelsius.value = settings[currentType].solution2(currentValue);
      if (!inputFahrenheit.value) {
        inputCelsius.value = '';
      }
    });
  }
  converterListener();

  selectOptions.addEventListener('change', converterListener)
}

converter();

const lifeTime = () => {
  const btnStart = document.querySelector('.longevity__btn');
  const btnReset = document.querySelector('.longevity__btn_reset');
  // Елементи для змінення значень
  const elementYear = document.querySelector('.value-years'),
        elementMonth = document.querySelector('.value-months'),
        elementDay = document.querySelector('.value-days'),
        elementHour = document.querySelector('.value-hours'),
        elementMinute = document.querySelector('.value-minutes'),
        elementSecond = document.querySelector('.value-seconds');
  // Слухач подій
  btnStart.addEventListener('click', (e) => {
    const date = document.querySelector('#date'),
          time = document.querySelector('#time');
    if (date.value.length == 0 || time.value.length == 0) {
      return;
    }
    let userDate = Date.parse(`${date.value} ${time.value}`);
    if (userDate > Date.parse(new Date())) {
      return;
    }
    let userDateNotParse = new Date(`${date.value}`);
    e.target.classList.add('hide');
    btnReset.classList.remove('hide');

    // let interval;
    let interval = setInterval(() => {
      const currentDate = Date.parse(new Date());
      const differentTime = currentDate - userDate;

      elementYear.textContent = Math.floor(differentTime / (1000 * 60 * 60 * 24 * 365.25));
      elementMonth.textContent = (new Date().getFullYear() - userDateNotParse.getFullYear()) * 12 + (new Date().getMonth() - userDateNotParse.getMonth()) + (new Date().getDate() < userDateNotParse.getDate() ? -1 : 0);
      elementDay.textContent = Math.floor(differentTime / (1000 * 60 * 60 * 24));
      elementHour.textContent = Math.floor(differentTime / (1000 * 60 * 60));
      elementMinute.textContent = Math.floor(differentTime / (1000 * 60));
      elementSecond.textContent = Math.floor(differentTime / 1000);
    },1000);
    btnReset.addEventListener("click", (e) => {
      clearInterval(interval);
      e.target.classList.add('hide');
      btnStart.classList.remove('hide');
    })
  })
}

lifeTime();
